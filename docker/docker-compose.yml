version: '3.3'

services:
  redis_db:
    container_name: redis_db
    image: redis
    command: redis-server --requirepass 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
    restart: always
    volumes:
      - redis_data:/var/lib/redis/data
      - ./redis/redis.conf:/etc/redis/redis.conf
    ports:
      - 6379:6379
    env_file:
      - .env

  postgres_db:
    container_name: postgres_db
    image: postgres:14.4
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    ports:
      - 5432:5432

  web:
    container_name: web
    build:
      context: ../site/
      dockerfile: Dockerfile
    command: sh -c "python3 manage.py wait_for_db &&
                    python3 manage.py makemigrations &&
                    python3 manage.py migrate"
    restart: always
    depends_on:
      - postgres_db
      - redis_db
    env_file:
      - .env
      
  nginx:
    container_name: nginx
    image: nginx:latest
    restart: always
    ports:
      - "80:80"
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    volumes:
      - ./nginx:/etc/nginx/conf.d/
      - ./frontend:/var/www/html/
      - ./certbot/conf:/etc/letsencrypt 
      - ./certbot/www:/var/www/certbot
    depends_on:
      - web
  
  celery:
    container_name: celery
    build:
      context: ../site/
      dockerfile: Dockerfile
    command: celery -A elink worker
    restart: always
    env_file:
      - .env
    depends_on:
      - redis_db

  celery-beat:
    container_name: celery-beat
    build:
      context: ../site/
      dockerfile: Dockerfile
    command: celery -A elink beat
    restart: always
    env_file:
      - .env
    depends_on:
      - redis_db

  flower:
    container_name: flower
    image: mher/flower
    env_file:
      - .env
    command: celery flower --basic_auth=XXXXXXXXXX:XXXXXXXXXXX
    ports:  
      - 8888:8888
    depends_on:
      - celery-beat
      - celery
      - web
      - redis_db
    restart: always
  
  certbot:
    container_name: certbot
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data:
  redis_data:
